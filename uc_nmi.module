<?php
// $Id: uc_nmi.module,v 1.4.2.11 2009/08/17 21:27:56 islandusurper Exp $

/**
 * @file
 * Process payments using NMI.com.
 */

/**
 * Define some constants
 */
define('UC_NMI_TXN_URL', 'https://secure.nmi.com/api/transact.php');

/**
* Implementation of hook_help().
*/
function uc_nmi_help($section) {
  switch ($section) {
    case 'admin/help#uc_nmi':
      // Return a line-break version of the module README
      return filter_filter('process', 2, NULL, file_get_contents( dirname(__FILE__)."/README.txt") );
  }
}

/**
 * Implementation of hook_payment_gateway().
 */
function uc_nmi_payment_gateway() {
  $gateways[] = array(
    'id' => 'nmi',
    'title' => t('NMI Gateway Services'),
    'description' => t('Process credit card payments using the NMI Gateway Services.'),
    'settings' => 'uc_nmi_settings_form',
    'credit' => 'uc_nmi_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_ONLY, UC_CREDIT_PRIOR_AUTH_CAPTURE, UC_CREDIT_AUTH_CAPTURE, UC_CREDIT_REFERENCE_SET, UC_CREDIT_REFERENCE_TXN),
  );

  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_nmi_settings_form() {
  $form['nmi_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('NMI settings'),
  );

  $form['nmi_settings']['nmi_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('nmi_username', ''),
    '#description' => t('Username that is used for the NMI Gateway Services.'),
  );

  $form['nmi_settings']['nmi_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('nmi_password', ''),
    '#description' => t('The password used for the NMI Gateway Services.'),
  );

  $form['nmi_settings']['nmi_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => variable_get('nmi_url', UC_NMI_TXN_URL),
    '#description' => t('The transaction POST url for NMI Gateway'),
  );

  $form['nmi_settings']['nmi_type'] = array(
    '#type' => 'select',
    '#title' => t('Authentication type'),
    '#description' => t('Authorization Only will only set aside the funds that need to be withdrawn. Sale will withdraw the funds immediately.'),
    '#options' => array(
      'sale' => t('Sale'),
      'auth' => t('Authorization Only'),
    ),
    '#default_value' => variable_get('nmi_type', 'sale'),
  );
  $form['nmi_settings']['nmi_code'] = array(
    '#type' => 'select',
    '#title' => t('Request/Capture Credit Card Code Value (CVV2/CVC2/CID)'),
    '#description' => t('Authorization Only will only set aside the funds that need to be withdrawn. Sale will withdraw the funds immediately.'),
    '#options' => array(
      'yes' => t('Yes'),
      'no' => t('No'),
    ),
    '#default_value' => variable_get('nmi_code', 'yes'),
  );

  // Customer Vault stored profile settings
  $form['nmi_settings']['customer_vault_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customer Vault settings'),
    '#description' => t('These settings pertain to the NMI Customer Vault service.')
  );
  $form['nmi_settings']['customer_vault_settings']['uc_nmi_customer_vault_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always create a Customer Vault profile for securely storing CC info for later user.'),
    '#default_value' => variable_get('uc_nmi_customer_vault_profile', FALSE),
  );

  return $form;
}

// Main handler for CC transactions
function uc_nmi_charge($order_id, $amount, $data) {
  $order = uc_order_load($order_id);

  switch ($data['txn_type']) {
    // Charge and store profile using NMI's Customer Vault
    case UC_CREDIT_REFERENCE_TXN:
      return _uc_nmi_customer_vault_profile_charge($order, $amount, $data);
    
    // Store profile only
    case UC_CREDIT_REFERENCE_SET:
      if ($message = _uc_nmi_customer_vault_profile_create($order)) {
        return array('success' => FALSE, 'message' => $message);
      }
      else {
        return array('success' => TRUE, 'message' => t('New Customer Vault profile created successfully with NMI.'));
      }
    
    // All other transactions
    default:
      return _uc_nmi_charge($order, $amount, $data);
  }
}

function _uc_nmi_charge($order, $amount, $data) {
  global $user;

  $description = '';

  $description = "Drupal Order $order->order_id";

  $description = substr($description, 0, 255);
  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $billing_country = $billing_country[0]['country_iso_code_2'];

  $ship_country = uc_get_country_data(array('country_id' => $order->delivery_country));
  $ship_country = $ship_country[0]['country_iso_code_2'];  
  
  $formdata = array (
    'username' => variable_get('nmi_username', ''),
    'password' => variable_get('nmi_password', ''),

    // Customer Name and Billing Address
    'firstname' => $order->billing_first_name,
    'lastname' => $order->billing_last_name,
    'company' => $order->billing_company,
    'address1' => $order->billing_street1,
    'address2' => $order->billing_street2,
    'city' => $order->billing_city,
    'state' => uc_get_zone_code($order->billing_zone),
    'zip' => $order->billing_postal_code,
    'country' => $billing_country,
    'phone' => $order->billing_phone,

    // Customer Shipping Address
    'shipping_firstname' => $order->delivery_first_name,
    'shipping_lastname' => $order->delivery_last_name,
    'shipping_company' => $order->delivery_company,
    'shipping_address1' => $order->delivery_street1,
    'shipping_address2' => $order->delivery_street2,
    'shipping_city' => $order->delivery_city,
    'shipping_state' => uc_get_zone_code($order->delivery_zone),
    'shipping_zip' => $order->delivery_postal_code,
    'shipping_country' => $ship_country,

    // Additioanl customer data
    'ipaddress' => $_SERVER["REMOTE_ADDR"],

    // customer email address
    'email' => $order->primary_email,

    // Order information
    'orderid' => $order->order_id,  
    'orderdescription' => $description,

    // Transaction Data
    'amount' => uc_currency_format($amount, FALSE, FALSE, '.'),
    'type' => variable_get('nmi_type', ''),

    'ccnumber' => $order->payment_details['cc_number'],
    'ccexp' => $order->payment_details['cc_exp_month'] .'/'. $order->payment_details['cc_exp_year'],
    'cvv' => $order->payment_details['cc_cvv'],

    // Level 2 data
    'tax' => $order->line_items[2]['amount'],
    'shipping' => $order->line_items[1]['amount']
  );


  if (is_array($order->products)) {
    $i = 1;
    foreach ($order->products as $product) {
      $formdata['product_sku_' . $i] = $product->nid;
      $formdata['product_description_' . $i] = $product->title;
      $formdata['product_quantity_' . $i] = $product->qty;
      $formdata['product_amount_' . $i] = $product->price;

      if (is_array($product->data['attributes'])) {
        foreach ($product->data['attributes'] as $key => $value) {
          $formdata['product_description_' . $i] .= ', '. $key .': '. $value;
        }
      }
      $i++;
    }
  }


  // get host data
  $port = 443;
  $host = 'secure.networkmerchants.com';
  $path = "/gw/api/transact.php";

  //build the post string
  $poststring = '';
  foreach($formdata AS $key => $val){
    $poststring .= urlencode($key)."=".urlencode($val)."&";
  }
  // strip off trailing ampersand
  $poststring = substr($poststring, 0, -1);

  if( function_exists( "curl_init" )) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "https://".$host.$path);
    curl_setopt($ch, CURLOPT_VERBOSE, 0);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $poststring);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION,0);
    $return_data = curl_exec($ch);
    curl_close($ch);
  }else {
    $fp = fsockopen("ssl://".$host, $port, $errno, $errstr, $timeout = 60);

    if(!$fp){
      //error tell us
      $message = t('Possible server error! - $errstr ($errno)');
    }else {
      //send the server request
      fputs($fp, "POST $path HTTP/1.1\r\n");
      fputs($fp, "Host: $host\r\n");
      fputs($fp, "Content-type: application/x-www-form-urlencoded\r\n");
      fputs($fp, "Content-length: ".strlen($poststring)."\r\n");
      fputs($fp, "Connection: close\r\n\r\n");
      fputs($fp, $poststring . "\r\n\r\n");

      //Get the response header from the server
      $str = '';
      while(!feof($fp) && !stristr($str, 'content-length')) {
        $str = fgets($fp, 4096);
      }
      // If didnt get content-lenght, something is wrong, return false.
      if (!stristr($str, 'content-length')) {
        $message = t('An error occured while communicating with the NetworkMerchants.com server. It didn\'t reply (correctly). Please try again later, thank you.' );
        return false;
      }
      $data = "";
      while (!feof($fp)) {
        $data .= fgets ($fp, 1024);
      }

      $return_data = stristr(trim($data), "response");
    }
  }

  parse_str($return_data, $response);

  // Approved - Success!
  if ($response['response'] == "1") {
    $message = t('Credit card payment processed successfully. Transaction ID: !trans', array('!trans' => $response['transactionid']));
    $result = array(
      'success' => TRUE,
      'comment' => t('Credit card payment processed successfully. Transaction ID: !trans', array('!trans' => $response['transactionid'])),
      'message' => t('Credit card payment processed successfully. Transaction ID: !trans', array('!trans' => $response['transactionid'])),
      'uid' => $user->uid,
    );
    
    // Set up customer vault profile if appropriate
    if (variable_get('uc_nmi_customer_vault_profile', FALSE)) { // TODO: Add check for recurring product
      _uc_nmi_customer_vault_profile_create($order);
    }

  }elseif ($response['response'] == "2") {   // Payment Declined
    $message = t('Credit card declined. Reason code: !text', array('!text' => $response['responsetext']));
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card declined. Reason code: !text', array('!text' => $response['responsetext'])),
      'message' => t('Credit card declined. Reason code: !text', array('!text' => $response['responsetext'])),
      'uid' => $user->uid,
    );
  }elseif($response['response'] == "3"){  // Payment Error
    $message = t('Credit card error. Reason code: !text', array('!text' => $response['responsetext']));
    $result = array(
      'success' => FALSE,
      'comment' => t('Credit card error. Reason code: !text', array('!text' => $response['responsetext'])),
      'message' => t('Credit card error. Reason code: !text', array('!text' => $response['responsetext'])),
      'uid' => $user->uid,
    );
  }  

  uc_order_comment_save($order->order_id, $user->uid, $message, 'admin');

  return $result;

}

function _uc_nmi_customer_vault_profile_create($order) {
  $result = _uc_nmi_customer_vault_profile_create_request($order);
  // Bail on error (response = 3) or failure (response = 2)
  if ($result['response'] != 1) {
    $message = t('NMI: Customer Vault error or failure. Reason code: !text', array('!text' => $result['responsetext']));
    uc_order_comment_save($order->order_id, 0, $message, 'admin');
    watchdog('uc_nmi_recurring', $message, array(), WATCHDOG_ERROR);
    return $message;
  }
  else {
    uc_order_comment_save($order->order_id, 0, t('NMI: Customer Vault profile created - @id', array('@id' => $result['customer_vault_id'])));
  } 
  
  // Save the new profile to the db
  //$order->data = uc_credit_log_reference($order->order_id, $result['customer_vault_id'], $order->payment_details['cc_number']);
  // Save the new profile to the db as part of the data array of the user object
  $account = user_load($order->uid);
  $account->data['customer_vault_id'] = $result['customer_vault_id'];
  user_save((object) array('uid' => $account->uid), (array) $account);
  return '';
}

/**
 * Helper to create the Customer Vault profile create request
 */
function _uc_nmi_customer_vault_profile_create_request($order) {
  $vault = uc_nmi_build_customer_vault();

  $month = str_pad($order->payment_details['cc_exp_month'], 2, 0, STR_PAD_LEFT);
  $year = substr($order->payment_details['cc_exp_year'], -2);

  // Card information
  $vault->setCcNumber($order->payment_details['cc_number']);
  $vault->setCcExp($month.$year);

  // Customer information
  $vault->setCompany($order->billing_company);
  $vault->setFirstName($order->billing_first_name);
  $vault->setLastName($order->billing_last_name);

  // Order information
  $vault->setOrderId($order->order_id);
  $vault->setOrderDescription(t('Create Customer Vault Profile'));

  $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));
  $billing_country = $billing_country[0]['country_iso_code_2'];

  // Billing address
  $vault->setAddress1($order->billing_street1);
  $vault->setAddress2($order->billing_street2);
  $vault->setCity($order->billing_city);
  $vault->setState(uc_get_zone_code($order->billing_zone));
  $vault->setZip($order->billing_postal_code);
  $vault->setCountry($billing_country);
  $vault->setPhone($order->billing_phone);
  $vault->setEmail($order->primary_email);

  $vault->add();
  $response = $vault->execute();
  return $response;
}

/**
 * Use a Customer Vault id to charge and existing Customer Vault profile
 */
function _uc_nmi_customer_vault_profile_charge($order, $amount, $data) {
  global $user;
  $response = _uc_nmi_customer_vault_profile_charge_request($order, $amount, $data);
  // Error or Failure
  if ($response['response'] != 1) {
    $result = array(
      'success' => FALSE,
    );
    $comment[] = '('. $response['response_code'] .': '. $response['responsetext'] .')';
  }
  // Transaction succeeded
  else {
    $result = array(
      'success' => TRUE,
    );

    // Info message
    $types = uc_credit_transaction_types();
    $context = array(
      'revision' => 'formatted-original',
      'type' => 'amount',
    );
    $comment[] = t('<b>@type:</b> @amount', array('@type' => $types[$data['txn_type']], '@amount' => uc_price($amount, $context)));
    // Save a comment to the order
    uc_order_comment_save($order->order_id, $user->uid, implode('<br/>', $comment), 'admin');
  }
  // Response to payment gateway API
  return $result + array(
    'comment' => implode(', ', $comment),
    'message' => implode('<br/>', $comment),
    'uid' => $user->uid,
  );
}

/**
 * Helper to create the Customer Vault charge request
 */
function _uc_nmi_customer_vault_profile_charge_request($order, $amount, $data) {
  $vault = uc_nmi_build_customer_vault();
  $vault->setCustomerVaultId($data['ref_id']);
  // Order Information
  $vault->setOrderId($order->order_id);
  $vault->setOrderDescription(t('Recurring charge. Order @id', array('@id' => $order->order_id)));
  $vault->charge($amount);

  $result = $vault->execute();
  return $result;
}

/**
 * Create and return an nmiCustomerVault object
 */
function uc_nmi_build_customer_vault($options = array()) {
  require_once 'lib/nmiCustomerVault.class.php';
  // Set up the nmiCustomerVault object
  $options['nmi_user'] = variable_get('nmi_username', '');
  $options['nmi_password'] = variable_get('nmi_password', '');
  // Set url (if needed)
  $options['nmi_url'] = variable_get('nmi_url', UC_NMI_TXN_URL);

  $vault = new nmiCustomerVault($options);
  return $vault;
}
