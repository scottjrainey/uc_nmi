<?php

/**
 * @file
 * uc_recurring implementation for NMI based gateway services
 */

/**
 * Implementation of hook_recurring_info()
 */
function uc_nmi_recurring_info() {
  $items['nmi_customer_vault'] = array(
    'name' => t('NMI Gateway Services (Customer Vault)'),
    'payment method' => 'credit',
    'module' => 'uc_nmi_recurring',
    'fee handler' => 'nmi_customer_vault',
    'renew callback' => 'uc_nmi_recurring_customer_vault_renew',
    'process callback' => 'uc_nmi_recurring_customer_vault_process',
    'saved profile' => TRUE,
    'menu' => array(
      'charge' => UC_RECURRING_MENU_DEFAULT,
      'edit' => UC_RECURRING_MENU_DEFAULT,
      'update' => array(
        'title' => 'Update Account Details',
        'page arguments' => array('uc_nmi_recurring_customer_vault_update_form'),
        'file' => 'uc_nmi_recurring.module',
      ),
      'profile' => array(
        'title' => 'Customer Vault Profile',
        'page arguments' => array('uc_nmi_recurring_customer_vault_profile_form'),
        'access callback' => 'user_access',
        'access arguments' => array('administer recurring fees'),
        'file' => 'uc_nmi_recurring.module',
      ),
      'cancel' => UC_RECURRING_MENU_DEFAULT,
    ), // Use the default user operation defined in uc_recurring.
  );

  // TODO: Find out why this works...
  $items['nmi'] = $items['nmi_customer_vault'];

  return $items;
}

/**
 * Set up the recurring fee by creating a Customer Vault entry for future payments
 *
 * @param $order
 *   The order object
 * @param $fee
 *   The fee object
 * @return
 *   TRUE if recurring fee setup
 */
function uc_nmi_recurring_customer_vault_process($order, &$fee) {
  $fee->fee_handler = 'nmi_customer_vault';
  if (variable_get('uc_nmi_customer_vault_profile', FALSE) == FALSE) {
    $account = user_load($fee->uid);
    if ($account->data['customer_vault_id']) {
      $data = array();
    }
    else {
      $data = array(
        'txn_type' => UC_CREDIT_REFERENCE_SET,
      );
    }
    return uc_nmi_charge($order->order_id, $order->total_amount, $data);
  }
  return TRUE;
}

/**
 * Process a renewal using the Customer Vault profile
 *
 * @param $order
 *   The order object
 * @param $fee
 *   The fee object
 * @return
 *   TRUE if renewal succeeded
 */
function uc_nmi_recurring_customer_vault_renew($order, &$fee) {
  $account = user_load($fee->uid);
  if ($account->data['customer_vault_id']) {
    $data = array(
      'txn_type' => UC_CREDIT_REFERENCE_TXN,
      'ref_id' => $account->data['customer_vault_id'],
    );
    $result = uc_nmi_charge($order->order_id, $order->order_total, $data);

    if ($result['success'] == TRUE) {
      uc_payment_enter($order->order_id, $order->payment_method, $order->order_total, $fee->uid, $result['data'], $result['comment']);
      return TRUE;
    }
    else {
      watchdog('uc_nmi_recurring', $result['message'], array(), WATCHDOG_ERROR);
    }
  }
  return FALSE;
}

/**
 * Create form for updating credit card details for recurring fee
 */
function uc_nmi_recurring_customer_vault_update_form($form_state, $rfid) {
  // Load fee
  $fee = uc_recurring_fee_user_load($rfid);
  // Load corresponding order
  $order = uc_order_load($fee->order_id);

  $form['rfid'] = array(
    '#type' => 'value',
    '#value' => $rfid,
  );
  $form['cc_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit card details'),
    '#theme' => 'uc_payment_method_credit_form',
    '#tree' => TRUE,
  );
  $form['cc_data'] += uc_payment_method_credit_form(array(), $order);
  unset($form['cc_data']['cc_policy']);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#suffix' => l(t('Cancel'), 'user/'. $user->uid),
  );

  return $form;
}

/**
 * Implements update form submit for the Customer Vault profile
 */
function uc_nmi_recurring_customer_vault_update_form_submit(&$form, &$form_state) {
  $fee = uc_recurring_fee_user_load($form_state['values']['rfid']);
  $order = uc_order_load($fee->order_id);
  $order->payment_details = $form_state['values']['cc_data'];
  $customer_vault_id = end(array_keys($order->data['cc_txns']['references']));
  if ($message = _uc_nmi_recurring_customer_vault_update_paymentprofile($order, $customer_vault_id)) {
    drupal_set_message(t('Account update failed.'), 'error');
  }
  else {
    drupal_set_message(t('Account updated.'));
    $form_state['redirect'] = 'user/' . $form_state['values']['uid'];
  }
}

/**
 * TODO: This function needs to be moved to the uc_nmi module and renamed to:
 *         uc_nmi_update_customer_vault_paymentprofile($order, $cv_id)
 */
function _uc_nmi_recurring_customer_vault_update_paymentprofile($order, $cv_id) {
  $vault = uc_nmi_build_customer_vault();
  $vault->setCustomerVaultId($cv_id);

  $month = str_pad($order->payment_details['cc_exp_month'], 2, 0, STR_PAD_LEFT);
  $year = substr($order->payment_details['cc_exp_year'], -2);

  // Card information
  $vault->setCcNumber($order->payment_details['cc_number']);
  $vault->setCcExp($month.$year);

  $vault->update();
  $result = $vault->execute();

  if ($result['response'] != 1) {
    uc_order_comment_save($order->order_id, 0, t('NMI: Update Customer Vault failed.<br/>Reason - @text', array('@text' => $result['responsetext'])), 'admin');
    return $result['responsetext'];
  }
  else {
    uc_order_comment_save($order->order_id, 0, t('NMI: Customer Vault update - @id', array('@id' => $result['customer_vault_id'])));
  }
}
